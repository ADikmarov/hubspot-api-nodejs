/**
 * CRM Objects
 * CRM objects such as companies, contacts, deals, line items, products, tickets, and quotes are native objects in HubSpotâ€™s CRM. These core building blocks support custom properties, store critical information, and play a central role in the HubSpot application.  ## Supported Object Types  This API provides access to collections of CRM objects, which return a map of property names to values. Each object type has its own set of default properties, which can be found by exploring the [CRM Object Properties API](https://developers.hubspot.com/docs/methods/crm-properties/crm-properties-overview).  |Object Type |Properties returned by default | |--|--| | `companies` | `name`, `domain` | | `contacts` | `firstname`, `lastname`, `email` | | `deals` | `dealname`, `amount`, `closedate`, `pipeline`, `dealstage` | | `products` | `name`, `description`, `price` | | `tickets` | `content`, `hs_pipeline`, `hs_pipeline_stage`, `hs_ticket_category`, `hs_ticket_priority`, `subject` |  Find a list of all properties for an object type using the [CRM Object Properties](https://developers.hubspot.com/docs/methods/crm-properties/get-properties) API. e.g. `GET https://api.hubapi.com/properties/v2/companies/properties`. Change the properties returned in the response using the `properties` array in the request body.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BatchInputSimplePublicObjectBatchInput', 'model/BatchInputSimplePublicObjectId', 'model/BatchInputSimplePublicObjectInput', 'model/BatchReadInputSimplePublicObjectId', 'model/BatchResponseSimplePublicObject', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BatchInputSimplePublicObjectBatchInput'), require('../model/BatchInputSimplePublicObjectId'), require('../model/BatchInputSimplePublicObjectInput'), require('../model/BatchReadInputSimplePublicObjectId'), require('../model/BatchResponseSimplePublicObject'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.CrmObjects) {
      root.CrmObjects = {};
    }
    root.CrmObjects.BatchApi = factory(root.CrmObjects.ApiClient, root.CrmObjects.BatchInputSimplePublicObjectBatchInput, root.CrmObjects.BatchInputSimplePublicObjectId, root.CrmObjects.BatchInputSimplePublicObjectInput, root.CrmObjects.BatchReadInputSimplePublicObjectId, root.CrmObjects.BatchResponseSimplePublicObject, root.CrmObjects.Error);
  }
}(this, function(ApiClient, BatchInputSimplePublicObjectBatchInput, BatchInputSimplePublicObjectId, BatchInputSimplePublicObjectInput, BatchReadInputSimplePublicObjectId, BatchResponseSimplePublicObject, Error) {
  'use strict';

  /**
   * Batch service.
   * @module api/BatchApi
   * @version v3
   */

  /**
   * Constructs a new BatchApi. 
   * @alias module:api/BatchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Archive a batch of objects by ID
     * Archive a list of objects given a collection of IDs. This method will return a &#x60;204 No Content&#x60; response on success regardless of the initial state of the object (e.g. active, already archived, non-existent).
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputSimplePublicObjectId} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.archiveBatchWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling archiveBatch");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{objectType}/batch/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Archive a batch of objects by ID
     * Archive a list of objects given a collection of IDs. This method will return a &#x60;204 No Content&#x60; response on success regardless of the initial state of the object (e.g. active, already archived, non-existent).
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputSimplePublicObjectId} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.archiveBatch = function(objectType, opts) {
      return this.archiveBatchWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a batch of objects
     * Create a batch of objects. This follows the same rules as creating an individual object.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputSimplePublicObjectInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchResponseSimplePublicObject} and HTTP response
     */
    this.createBatchWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling createBatch");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchResponseSimplePublicObject;

      return this.apiClient.callApi(
        '/{objectType}/batch/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a batch of objects
     * Create a batch of objects. This follows the same rules as creating an individual object.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputSimplePublicObjectInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchResponseSimplePublicObject}
     */
    this.createBatch = function(objectType, opts) {
      return this.createBatchWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a batch of objects by ID
     * Read a list of objects given a collection of IDs. Use the &#x60;properties&#x60; request body property to control which properties are returned.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @param {module:model/BatchReadInputSimplePublicObjectId} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchResponseSimplePublicObject} and HTTP response
     */
    this.readBatchWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling readBatch");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
        'archived': opts['archived'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchResponseSimplePublicObject;

      return this.apiClient.callApi(
        '/{objectType}/batch/read', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a batch of objects by ID
     * Read a list of objects given a collection of IDs. Use the &#x60;properties&#x60; request body property to control which properties are returned.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @param {module:model/BatchReadInputSimplePublicObjectId} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchResponseSimplePublicObject}
     */
    this.readBatch = function(objectType, opts) {
      return this.readBatchWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a batch of objects
     * Perform a partial upate on a batch of objects. This follows the same rules as performing partial updates on an individual object.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputSimplePublicObjectBatchInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchResponseSimplePublicObject} and HTTP response
     */
    this.updateBatchWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling updateBatch");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchResponseSimplePublicObject;

      return this.apiClient.callApi(
        '/{objectType}/batch/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a batch of objects
     * Perform a partial upate on a batch of objects. This follows the same rules as performing partial updates on an individual object.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputSimplePublicObjectBatchInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchResponseSimplePublicObject}
     */
    this.updateBatch = function(objectType, opts) {
      return this.updateBatchWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
