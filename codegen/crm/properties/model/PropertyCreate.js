/**
 * Properties
 * All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OptionInput'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./OptionInput'));
  } else {
    // Browser globals (root is window)
    if (!root.Properties) {
      root.Properties = {};
    }
    root.Properties.PropertyCreate = factory(root.Properties.ApiClient, root.Properties.OptionInput);
  }
}(this, function(ApiClient, OptionInput) {
  'use strict';



  /**
   * The PropertyCreate model module.
   * @module model/PropertyCreate
   * @version v3
   */

  /**
   * Constructs a new <code>PropertyCreate</code>.
   * @alias module:model/PropertyCreate
   * @class
   * @param name {String} The internal property name, which must be used when referencing the property via the API.
   * @param label {String} A human-readable property label that will be shown in HubSpot.
   * @param type {module:model/PropertyCreate.TypeEnum} The data type of the property.
   * @param fieldType {module:model/PropertyCreate.FieldTypeEnum} Controls how the property appears in HubSpot.
   * @param groupName {String} The name of the property group the property belongs to.
   */
  var exports = function(name, label, type, fieldType, groupName) {
    var _this = this;

    _this['name'] = name;
    _this['label'] = label;
    _this['type'] = type;
    _this['fieldType'] = fieldType;
    _this['groupName'] = groupName;
  };

  /**
   * Constructs a <code>PropertyCreate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PropertyCreate} obj Optional instance to populate.
   * @return {module:model/PropertyCreate} The populated <code>PropertyCreate</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('fieldType')) {
        obj['fieldType'] = ApiClient.convertToType(data['fieldType'], 'String');
      }
      if (data.hasOwnProperty('groupName')) {
        obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('options')) {
        obj['options'] = ApiClient.convertToType(data['options'], [OptionInput]);
      }
      if (data.hasOwnProperty('displayOrder')) {
        obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
      }
      if (data.hasOwnProperty('hasUniqueValue')) {
        obj['hasUniqueValue'] = ApiClient.convertToType(data['hasUniqueValue'], 'Boolean');
      }
      if (data.hasOwnProperty('hidden')) {
        obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The internal property name, which must be used when referencing the property via the API.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * A human-readable property label that will be shown in HubSpot.
   * @member {String} label
   */
  exports.prototype['label'] = undefined;
  /**
   * The data type of the property.
   * @member {module:model/PropertyCreate.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Controls how the property appears in HubSpot.
   * @member {module:model/PropertyCreate.FieldTypeEnum} fieldType
   */
  exports.prototype['fieldType'] = undefined;
  /**
   * The name of the property group the property belongs to.
   * @member {String} groupName
   */
  exports.prototype['groupName'] = undefined;
  /**
   * A description of the property that will be shown as help text in HubSpot.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * A list of valid options for the property. This field is required for enumerated properties.
   * @member {Array.<module:model/OptionInput>} options
   */
  exports.prototype['options'] = undefined;
  /**
   * Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property to be displayed after any positive values.
   * @member {Number} displayOrder
   */
  exports.prototype['displayOrder'] = undefined;
  /**
   * Whether or not the property's value must be unique. Once set, this can't be changed.
   * @member {Boolean} hasUniqueValue
   */
  exports.prototype['hasUniqueValue'] = undefined;
  /**
   * If true, the property won't be visible and can't be used in HubSpot.
   * @member {Boolean} hidden
   */
  exports.prototype['hidden'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "string"
     * @const
     */
    "string": "string",
    /**
     * value: "number"
     * @const
     */
    "number": "number",
    /**
     * value: "date"
     * @const
     */
    "date": "date",
    /**
     * value: "datetime"
     * @const
     */
    "datetime": "datetime",
    /**
     * value: "enumeration"
     * @const
     */
    "enumeration": "enumeration"  };

  /**
   * Allowed values for the <code>fieldType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FieldTypeEnum = {
    /**
     * value: "textarea"
     * @const
     */
    "textarea": "textarea",
    /**
     * value: "text"
     * @const
     */
    "text": "text",
    /**
     * value: "date"
     * @const
     */
    "date": "date",
    /**
     * value: "file"
     * @const
     */
    "file": "file",
    /**
     * value: "number"
     * @const
     */
    "number": "number",
    /**
     * value: "select"
     * @const
     */
    "select": "select",
    /**
     * value: "radio"
     * @const
     */
    "radio": "radio",
    /**
     * value: "checkbox"
     * @const
     */
    "checkbox": "checkbox",
    /**
     * value: "booleancheckbox"
     * @const
     */
    "booleancheckbox": "booleancheckbox"  };


  return exports;
}));


