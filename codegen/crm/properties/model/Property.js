/**
 * Properties
 * All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Option', 'model/PropertyMutability'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Option'), require('./PropertyMutability'));
  } else {
    // Browser globals (root is window)
    if (!root.Properties) {
      root.Properties = {};
    }
    root.Properties.Property = factory(root.Properties.ApiClient, root.Properties.Option, root.Properties.PropertyMutability);
  }
}(this, function(ApiClient, Option, PropertyMutability) {
  'use strict';



  /**
   * The Property model module.
   * @module model/Property
   * @version v3
   */

  /**
   * Constructs a new <code>Property</code>.
   * @alias module:model/Property
   * @class
   * @param name {String} The internal property name, which must be used when referencing the property via the API.
   * @param label {String} A human-readable property label that will be shown in HubSpot.
   * @param type {String} The property data type.
   * @param fieldType {module:model/Property.FieldTypeEnum} Controls how the property appears in HubSpot.
   * @param description {String} A description of the property that will be shown as help text in HubSpot.
   * @param groupName {String} The name of the property group the property belongs to.
   * @param options {Array.<module:model/Option>} A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.
   */
  var exports = function(name, label, type, fieldType, description, groupName, options) {
    var _this = this;

    _this['name'] = name;
    _this['label'] = label;
    _this['type'] = type;
    _this['fieldType'] = fieldType;
    _this['description'] = description;
    _this['groupName'] = groupName;
    _this['options'] = options;
  };

  /**
   * Constructs a <code>Property</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Property} obj Optional instance to populate.
   * @return {module:model/Property} The populated <code>Property</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('updatedAt')) {
        obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
      }
      if (data.hasOwnProperty('createdAt')) {
        obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
      }
      if (data.hasOwnProperty('archivedAt')) {
        obj['archivedAt'] = ApiClient.convertToType(data['archivedAt'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('fieldType')) {
        obj['fieldType'] = ApiClient.convertToType(data['fieldType'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('groupName')) {
        obj['groupName'] = ApiClient.convertToType(data['groupName'], 'String');
      }
      if (data.hasOwnProperty('options')) {
        obj['options'] = ApiClient.convertToType(data['options'], [Option]);
      }
      if (data.hasOwnProperty('createdUserId')) {
        obj['createdUserId'] = ApiClient.convertToType(data['createdUserId'], 'String');
      }
      if (data.hasOwnProperty('updatedUserId')) {
        obj['updatedUserId'] = ApiClient.convertToType(data['updatedUserId'], 'String');
      }
      if (data.hasOwnProperty('referencedObjectType')) {
        obj['referencedObjectType'] = ApiClient.convertToType(data['referencedObjectType'], 'String');
      }
      if (data.hasOwnProperty('displayOrder')) {
        obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
      }
      if (data.hasOwnProperty('calculated')) {
        obj['calculated'] = ApiClient.convertToType(data['calculated'], 'Boolean');
      }
      if (data.hasOwnProperty('externalOptions')) {
        obj['externalOptions'] = ApiClient.convertToType(data['externalOptions'], 'Boolean');
      }
      if (data.hasOwnProperty('archived')) {
        obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
      }
      if (data.hasOwnProperty('hasUniqueValue')) {
        obj['hasUniqueValue'] = ApiClient.convertToType(data['hasUniqueValue'], 'Boolean');
      }
      if (data.hasOwnProperty('hidden')) {
        obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
      }
      if (data.hasOwnProperty('hubspotDefined')) {
        obj['hubspotDefined'] = ApiClient.convertToType(data['hubspotDefined'], 'Boolean');
      }
      if (data.hasOwnProperty('showCurrencySymbol')) {
        obj['showCurrencySymbol'] = ApiClient.convertToType(data['showCurrencySymbol'], 'Boolean');
      }
      if (data.hasOwnProperty('mutability')) {
        obj['mutability'] = PropertyMutability.constructFromObject(data['mutability']);
      }
      if (data.hasOwnProperty('formField')) {
        obj['formField'] = ApiClient.convertToType(data['formField'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {String} updatedAt
   */
  exports.prototype['updatedAt'] = undefined;
  /**
   * @member {String} createdAt
   */
  exports.prototype['createdAt'] = undefined;
  /**
   * When the property was archived.
   * @member {String} archivedAt
   */
  exports.prototype['archivedAt'] = undefined;
  /**
   * The internal property name, which must be used when referencing the property via the API.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * A human-readable property label that will be shown in HubSpot.
   * @member {String} label
   */
  exports.prototype['label'] = undefined;
  /**
   * The property data type.
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Controls how the property appears in HubSpot.
   * @member {module:model/Property.FieldTypeEnum} fieldType
   */
  exports.prototype['fieldType'] = undefined;
  /**
   * A description of the property that will be shown as help text in HubSpot.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The name of the property group the property belongs to.
   * @member {String} groupName
   */
  exports.prototype['groupName'] = undefined;
  /**
   * A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.
   * @member {Array.<module:model/Option>} options
   */
  exports.prototype['options'] = undefined;
  /**
   * The internal user ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot.
   * @member {String} createdUserId
   */
  exports.prototype['createdUserId'] = undefined;
  /**
   * The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot.
   * @member {String} updatedUserId
   */
  exports.prototype['updatedUserId'] = undefined;
  /**
   * If this property is related to other object(s), they'll be listed here.
   * @member {String} referencedObjectType
   */
  exports.prototype['referencedObjectType'] = undefined;
  /**
   * Properties are shown in order, starting with the lowest positive integer value.
   * @member {Number} displayOrder
   */
  exports.prototype['displayOrder'] = undefined;
  /**
   * For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties.
   * @member {Boolean} calculated
   */
  exports.prototype['calculated'] = undefined;
  /**
   * For default properties, true indicates that the options are stored externally to the property settings.
   * @member {Boolean} externalOptions
   */
  exports.prototype['externalOptions'] = undefined;
  /**
   * Whether or not the property is archived.
   * @member {Boolean} archived
   */
  exports.prototype['archived'] = undefined;
  /**
   * Whether or not the property's value must be unique. Once set, this can't be changed.
   * @member {Boolean} hasUniqueValue
   */
  exports.prototype['hasUniqueValue'] = undefined;
  /**
   * Whether or not the property will be hidden from the HubSpot UI. It's recommended this be set to false for custom properties.
   * @member {Boolean} hidden
   */
  exports.prototype['hidden'] = undefined;
  /**
   * This will be true for default object properties built into HubSpot.
   * @member {Boolean} hubspotDefined
   */
  exports.prototype['hubspotDefined'] = undefined;
  /**
   * Whether or not the property will display the currency symbol set in the account settings.
   * @member {Boolean} showCurrencySymbol
   */
  exports.prototype['showCurrencySymbol'] = undefined;
  /**
   * @member {module:model/PropertyMutability} mutability
   */
  exports.prototype['mutability'] = undefined;
  /**
   * Whether or not the property can be used in a HubSpot form.
   * @member {Boolean} formField
   */
  exports.prototype['formField'] = undefined;


  /**
   * Allowed values for the <code>fieldType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FieldTypeEnum = {
    /**
     * value: "textarea"
     * @const
     */
    "textarea": "textarea",
    /**
     * value: "text"
     * @const
     */
    "text": "text",
    /**
     * value: "date"
     * @const
     */
    "date": "date",
    /**
     * value: "file"
     * @const
     */
    "file": "file",
    /**
     * value: "number"
     * @const
     */
    "number": "number",
    /**
     * value: "select"
     * @const
     */
    "select": "select",
    /**
     * value: "radio"
     * @const
     */
    "radio": "radio",
    /**
     * value: "checkbox"
     * @const
     */
    "checkbox": "checkbox",
    /**
     * value: "booleancheckbox"
     * @const
     */
    "booleancheckbox": "booleancheckbox"  };


  return exports;
}));


