/**
 * Properties
 * All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CollectionResponseProperty', 'model/Error', 'model/Property', 'model/PropertyCreate', 'model/PropertyUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CollectionResponseProperty'), require('../model/Error'), require('../model/Property'), require('../model/PropertyCreate'), require('../model/PropertyUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.Properties) {
      root.Properties = {};
    }
    root.Properties.CoreApi = factory(root.Properties.ApiClient, root.Properties.CollectionResponseProperty, root.Properties.Error, root.Properties.Property, root.Properties.PropertyCreate, root.Properties.PropertyUpdate);
  }
}(this, function(ApiClient, CollectionResponseProperty, Error, Property, PropertyCreate, PropertyUpdate) {
  'use strict';

  /**
   * Core service.
   * @module api/CoreApi
   * @version v3
   */

  /**
   * Constructs a new CoreApi. 
   * @alias module:api/CoreApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Archive a property
     * Move a property identified by {propertyName} to the recycling bin.
     * @param {String} objectType 
     * @param {String} propertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deletecrmv3propertiesobjectTypepropertyNameWithHttpInfo = function(objectType, propertyName) {
      var postBody = null;

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling deletecrmv3propertiesobjectTypepropertyName");
      }

      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling deletecrmv3propertiesobjectTypepropertyName");
      }


      var pathParams = {
        'objectType': objectType,
        'propertyName': propertyName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{objectType}/{propertyName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Archive a property
     * Move a property identified by {propertyName} to the recycling bin.
     * @param {String} objectType 
     * @param {String} propertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deletecrmv3propertiesobjectTypepropertyName = function(objectType, propertyName) {
      return this.deletecrmv3propertiesobjectTypepropertyNameWithHttpInfo(objectType, propertyName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read all properties
     * Read all existing properties for the specified object type and HubSpot account.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionResponseProperty} and HTTP response
     */
    this.getcrmv3propertiesobjectTypeWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getcrmv3propertiesobjectType");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
        'archived': opts['archived'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', '*/*'];
      var returnType = CollectionResponseProperty;

      return this.apiClient.callApi(
        '/{objectType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read all properties
     * Read all existing properties for the specified object type and HubSpot account.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionResponseProperty}
     */
    this.getcrmv3propertiesobjectType = function(objectType, opts) {
      return this.getcrmv3propertiesobjectTypeWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a property
     * Read a property identified by {propertyName}.
     * @param {String} objectType 
     * @param {String} propertyName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    this.getcrmv3propertiesobjectTypepropertyNameWithHttpInfo = function(objectType, propertyName, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getcrmv3propertiesobjectTypepropertyName");
      }

      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling getcrmv3propertiesobjectTypepropertyName");
      }


      var pathParams = {
        'objectType': objectType,
        'propertyName': propertyName
      };
      var queryParams = {
        'archived': opts['archived'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', '*/*'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/{objectType}/{propertyName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a property
     * Read a property identified by {propertyName}.
     * @param {String} objectType 
     * @param {String} propertyName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    this.getcrmv3propertiesobjectTypepropertyName = function(objectType, propertyName, opts) {
      return this.getcrmv3propertiesobjectTypepropertyNameWithHttpInfo(objectType, propertyName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a property
     * Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
     * @param {String} objectType 
     * @param {String} propertyName 
     * @param {Object} opts Optional parameters
     * @param {module:model/PropertyUpdate} opts.propertyUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    this.patchcrmv3propertiesobjectTypepropertyNameWithHttpInfo = function(objectType, propertyName, opts) {
      opts = opts || {};
      var postBody = opts['propertyUpdate'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling patchcrmv3propertiesobjectTypepropertyName");
      }

      // verify the required parameter 'propertyName' is set
      if (propertyName === undefined || propertyName === null) {
        throw new Error("Missing the required parameter 'propertyName' when calling patchcrmv3propertiesobjectTypepropertyName");
      }


      var pathParams = {
        'objectType': objectType,
        'propertyName': propertyName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', '*/*'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/{objectType}/{propertyName}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a property
     * Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
     * @param {String} objectType 
     * @param {String} propertyName 
     * @param {Object} opts Optional parameters
     * @param {module:model/PropertyUpdate} opts.propertyUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    this.patchcrmv3propertiesobjectTypepropertyName = function(objectType, propertyName, opts) {
      return this.patchcrmv3propertiesobjectTypepropertyNameWithHttpInfo(objectType, propertyName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a property
     * Create and return a copy of a new property for the specified object type.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/PropertyCreate} opts.propertyCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Property} and HTTP response
     */
    this.postcrmv3propertiesobjectTypeWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['propertyCreate'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling postcrmv3propertiesobjectType");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', '*/*'];
      var returnType = Property;

      return this.apiClient.callApi(
        '/{objectType}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a property
     * Create and return a copy of a new property for the specified object type.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/PropertyCreate} opts.propertyCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Property}
     */
    this.postcrmv3propertiesobjectType = function(objectType, opts) {
      return this.postcrmv3propertiesobjectTypeWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
