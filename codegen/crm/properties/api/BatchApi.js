/**
 * Properties
 * All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BatchInputPropertyCreate', 'model/BatchInputPropertyName', 'model/BatchReadInputPropertyName', 'model/BatchResponseProperty', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BatchInputPropertyCreate'), require('../model/BatchInputPropertyName'), require('../model/BatchReadInputPropertyName'), require('../model/BatchResponseProperty'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.Properties) {
      root.Properties = {};
    }
    root.Properties.BatchApi = factory(root.Properties.ApiClient, root.Properties.BatchInputPropertyCreate, root.Properties.BatchInputPropertyName, root.Properties.BatchReadInputPropertyName, root.Properties.BatchResponseProperty, root.Properties.Error);
  }
}(this, function(ApiClient, BatchInputPropertyCreate, BatchInputPropertyName, BatchReadInputPropertyName, BatchResponseProperty, Error) {
  'use strict';

  /**
   * Batch service.
   * @module api/BatchApi
   * @version v3
   */

  /**
   * Constructs a new BatchApi. 
   * @alias module:api/BatchApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Archive a batch of properties
     * Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputPropertyName} opts.batchInputPropertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.postcrmv3propertiesobjectTypebatcharchiveWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['batchInputPropertyName'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling postcrmv3propertiesobjectTypebatcharchive");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{objectType}/batch/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Archive a batch of properties
     * Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputPropertyName} opts.batchInputPropertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.postcrmv3propertiesobjectTypebatcharchive = function(objectType, opts) {
      return this.postcrmv3propertiesobjectTypebatcharchiveWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a batch of properties
     * Create a batch of properties using the same rules as when creating an individual property.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputPropertyCreate} opts.batchInputPropertyCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchResponseProperty} and HTTP response
     */
    this.postcrmv3propertiesobjectTypebatchcreateWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['batchInputPropertyCreate'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling postcrmv3propertiesobjectTypebatchcreate");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', '*/*'];
      var returnType = BatchResponseProperty;

      return this.apiClient.callApi(
        '/{objectType}/batch/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a batch of properties
     * Create a batch of properties using the same rules as when creating an individual property.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchInputPropertyCreate} opts.batchInputPropertyCreate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchResponseProperty}
     */
    this.postcrmv3propertiesobjectTypebatchcreate = function(objectType, opts) {
      return this.postcrmv3propertiesobjectTypebatchcreateWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read a batch of properties
     * Read a provided list of properties.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchReadInputPropertyName} opts.batchReadInputPropertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchResponseProperty} and HTTP response
     */
    this.postcrmv3propertiesobjectTypebatchreadWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['batchReadInputPropertyName'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling postcrmv3propertiesobjectTypebatchread");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', '*/*'];
      var returnType = BatchResponseProperty;

      return this.apiClient.callApi(
        '/{objectType}/batch/read', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Read a batch of properties
     * Read a provided list of properties.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchReadInputPropertyName} opts.batchReadInputPropertyName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchResponseProperty}
     */
    this.postcrmv3propertiesobjectTypebatchread = function(objectType, opts) {
      return this.postcrmv3propertiesobjectTypebatchreadWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
