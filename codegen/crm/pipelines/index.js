/**
 * CRM Pipelines
 * Pipelines represent distinct stages in a workflow, like closing a deal or servicing a support ticket. These endpoints provide access to read and modify pipelines in HubSpot. Pipelines support `deals` and `tickets` object types.  ## Pipeline ID validation  When calling endpoints that take pipelineId as a parameter, that ID must correspond to an existing, un-archived pipeline. Otherwise the request will fail with a `404 Not Found` response.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CollectionResponsePipeline', 'model/CollectionResponsePipelineStage', 'model/Error', 'model/ErrorDetail', 'model/NextPage', 'model/Paging', 'model/Pipeline', 'model/PipelineInput', 'model/PipelinePatchInput', 'model/PipelineStage', 'model/PipelineStageInput', 'model/PipelineStagePatchInput', 'api/PipelineStagesApi', 'api/PipelinesApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/CollectionResponsePipeline'), require('./model/CollectionResponsePipelineStage'), require('./model/Error'), require('./model/ErrorDetail'), require('./model/NextPage'), require('./model/Paging'), require('./model/Pipeline'), require('./model/PipelineInput'), require('./model/PipelinePatchInput'), require('./model/PipelineStage'), require('./model/PipelineStageInput'), require('./model/PipelineStagePatchInput'), require('./api/PipelineStagesApi'), require('./api/PipelinesApi'));
  }
}(function(ApiClient, CollectionResponsePipeline, CollectionResponsePipelineStage, Error, ErrorDetail, NextPage, Paging, Pipeline, PipelineInput, PipelinePatchInput, PipelineStage, PipelineStageInput, PipelineStagePatchInput, PipelineStagesApi, PipelinesApi) {
  'use strict';

  /**
   * Pipelines_represent_distinct_stages_in_a_workflow_like_closing_a_deal_or_servicing_a_support_ticket__These_endpoints_provide_access_to_read_and_modify_pipelines_in_HubSpot__Pipelines_support_deals_and_tickets_object_types__Pipeline_ID_validationWhen_calling_endpoints_that_take_pipelineId_as_a_parameter_that_ID_must_correspond_to_an_existing_un_archived_pipeline__Otherwise_the_request_will_fail_with_a_404_Not_Found_response_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var CrmPipelines = require('index'); // See note below*.
   * var xxxSvc = new CrmPipelines.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new CrmPipelines.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new CrmPipelines.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new CrmPipelines.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v3
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The CollectionResponsePipeline model constructor.
     * @property {module:model/CollectionResponsePipeline}
     */
    CollectionResponsePipeline: CollectionResponsePipeline,
    /**
     * The CollectionResponsePipelineStage model constructor.
     * @property {module:model/CollectionResponsePipelineStage}
     */
    CollectionResponsePipelineStage: CollectionResponsePipelineStage,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ErrorDetail model constructor.
     * @property {module:model/ErrorDetail}
     */
    ErrorDetail: ErrorDetail,
    /**
     * The NextPage model constructor.
     * @property {module:model/NextPage}
     */
    NextPage: NextPage,
    /**
     * The Paging model constructor.
     * @property {module:model/Paging}
     */
    Paging: Paging,
    /**
     * The Pipeline model constructor.
     * @property {module:model/Pipeline}
     */
    Pipeline: Pipeline,
    /**
     * The PipelineInput model constructor.
     * @property {module:model/PipelineInput}
     */
    PipelineInput: PipelineInput,
    /**
     * The PipelinePatchInput model constructor.
     * @property {module:model/PipelinePatchInput}
     */
    PipelinePatchInput: PipelinePatchInput,
    /**
     * The PipelineStage model constructor.
     * @property {module:model/PipelineStage}
     */
    PipelineStage: PipelineStage,
    /**
     * The PipelineStageInput model constructor.
     * @property {module:model/PipelineStageInput}
     */
    PipelineStageInput: PipelineStageInput,
    /**
     * The PipelineStagePatchInput model constructor.
     * @property {module:model/PipelineStagePatchInput}
     */
    PipelineStagePatchInput: PipelineStagePatchInput,
    /**
     * The PipelineStagesApi service constructor.
     * @property {module:api/PipelineStagesApi}
     */
    PipelineStagesApi: PipelineStagesApi,
    /**
     * The PipelinesApi service constructor.
     * @property {module:api/PipelinesApi}
     */
    PipelinesApi: PipelinesApi
  };

  return exports;
}));
