/**
 * CRM Pipelines
 * Pipelines represent distinct stages in a workflow, like closing a deal or servicing a support ticket. These endpoints provide access to read and modify pipelines in HubSpot. Pipelines support `deals` and `tickets` object types.  ## Pipeline ID validation  When calling endpoints that take pipelineId as a parameter, that ID must correspond to an existing, un-archived pipeline. Otherwise the request will fail with a `404 Not Found` response.
 *
 * OpenAPI spec version: v3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CollectionResponsePipeline', 'model/Error', 'model/Pipeline', 'model/PipelineInput', 'model/PipelinePatchInput'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CollectionResponsePipeline'), require('../model/Error'), require('../model/Pipeline'), require('../model/PipelineInput'), require('../model/PipelinePatchInput'));
  } else {
    // Browser globals (root is window)
    if (!root.CrmPipelines) {
      root.CrmPipelines = {};
    }
    root.CrmPipelines.PipelinesApi = factory(root.CrmPipelines.ApiClient, root.CrmPipelines.CollectionResponsePipeline, root.CrmPipelines.Error, root.CrmPipelines.Pipeline, root.CrmPipelines.PipelineInput, root.CrmPipelines.PipelinePatchInput);
  }
}(this, function(ApiClient, CollectionResponsePipeline, Error, Pipeline, PipelineInput, PipelinePatchInput) {
  'use strict';

  /**
   * Pipelines service.
   * @module api/PipelinesApi
   * @version v3
   */

  /**
   * Constructs a new PipelinesApi. 
   * @alias module:api/PipelinesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Archive a pipeline
     * Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
     * @param {String} objectType 
     * @param {String} pipelineId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.archiveWithHttpInfo = function(objectType, pipelineId) {
      var postBody = null;

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling archive");
      }

      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling archive");
      }


      var pathParams = {
        'objectType': objectType,
        'pipelineId': pipelineId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{objectType}/{pipelineId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Archive a pipeline
     * Archive the pipeline identified by &#x60;{pipelineId}&#x60;.
     * @param {String} objectType 
     * @param {String} pipelineId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.archive = function(objectType, pipelineId) {
      return this.archiveWithHttpInfo(objectType, pipelineId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a pipeline
     * Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pipeline} and HTTP response
     */
    this.createWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling create");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Pipeline;

      return this.apiClient.callApi(
        '/{objectType}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a pipeline
     * Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pipeline}
     */
    this.create = function(objectType, opts) {
      return this.createWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return a pipeline by ID
     * Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
     * @param {String} objectType 
     * @param {String} pipelineId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pipeline} and HTTP response
     */
    this.getByIdWithHttpInfo = function(objectType, pipelineId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getById");
      }

      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling getById");
      }


      var pathParams = {
        'objectType': objectType,
        'pipelineId': pipelineId
      };
      var queryParams = {
        'archived': opts['archived'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Pipeline;

      return this.apiClient.callApi(
        '/{objectType}/{pipelineId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return a pipeline by ID
     * Return a single pipeline object identified by its unique &#x60;{pipelineId}&#x60;.
     * @param {String} objectType 
     * @param {String} pipelineId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pipeline}
     */
    this.getById = function(objectType, pipelineId, opts) {
      return this.getByIdWithHttpInfo(objectType, pipelineId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all pipelines
     * Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionResponsePipeline} and HTTP response
     */
    this.getPageWithHttpInfo = function(objectType, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling getPage");
      }


      var pathParams = {
        'objectType': objectType
      };
      var queryParams = {
        'archived': opts['archived'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CollectionResponsePipeline;

      return this.apiClient.callApi(
        '/{objectType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve all pipelines
     * Return all pipelines for the object type specified by &#x60;{objectType}&#x60;.
     * @param {String} objectType 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionResponsePipeline}
     */
    this.getPage = function(objectType, opts) {
      return this.getPageWithHttpInfo(objectType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace a pipeline
     * Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
     * @param {String} objectType 
     * @param {String} pipelineId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pipeline} and HTTP response
     */
    this.replaceWithHttpInfo = function(objectType, pipelineId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling replace");
      }

      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling replace");
      }


      var pathParams = {
        'objectType': objectType,
        'pipelineId': pipelineId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Pipeline;

      return this.apiClient.callApi(
        '/{objectType}/{pipelineId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Replace a pipeline
     * Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
     * @param {String} objectType 
     * @param {String} pipelineId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pipeline}
     */
    this.replace = function(objectType, pipelineId, opts) {
      return this.replaceWithHttpInfo(objectType, pipelineId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a pipeline
     * Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
     * @param {String} objectType 
     * @param {String} pipelineId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @param {module:model/PipelinePatchInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pipeline} and HTTP response
     */
    this.updateWithHttpInfo = function(objectType, pipelineId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'objectType' is set
      if (objectType === undefined || objectType === null) {
        throw new Error("Missing the required parameter 'objectType' when calling update");
      }

      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling update");
      }


      var pathParams = {
        'objectType': objectType,
        'pipelineId': pipelineId
      };
      var queryParams = {
        'archived': opts['archived'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['hapikey', 'oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Pipeline;

      return this.apiClient.callApi(
        '/{objectType}/{pipelineId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a pipeline
     * Perform a partial update of the pipeline identified by &#x60;{pipelineId}&#x60;. The updated pipeline will be returned in the response.
     * @param {String} objectType 
     * @param {String} pipelineId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.archived Whether to return only results that have been archived. (default to false)
     * @param {module:model/PipelinePatchInput} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pipeline}
     */
    this.update = function(objectType, pipelineId, opts) {
      return this.updateWithHttpInfo(objectType, pipelineId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
