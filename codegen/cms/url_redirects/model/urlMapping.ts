/**
 * URL redirects
 * URL redirect operations
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from '../api';

export class UrlMapping {
    /**
    * The unique ID of this URL redirect.
    */
    'id': number;
    'portalId': number;
    'created': number;
    'updated': number;
    'createdById': number;
    'updatedById': number;
    /**
    * The target incoming URL, path, or pattern to match for redirection.
    */
    'routePrefix': string;
    /**
    * The destination URL, where the target URL should be redirected if it matches the `routePrefix`.
    */
    'destination': string;
    /**
    * The type of redirect to create. Options include: 301 (permanent), 302 (temporary), or 305 (proxy). Find more details [here](https://knowledge.hubspot.com/cos-general/how-to-redirect-a-hubspot-page).
    */
    'redirectStyle': number;
    'contentGroupId': number;
    /**
    * Whether the URL redirect mapping should apply only if a live page on the URL isn\'t found. If False, the URL redirect mapping will take precedence over any existing page.
    */
    'isOnlyAfterNotFound': boolean;
    'isRegex': boolean;
    /**
    * Whether the `routePrefix` should match on the entire URL, including the domain.
    */
    'isMatchFullUrl': boolean;
    /**
    * Whether the `routePrefix` should match on the entire URL path, including the query string.
    */
    'isMatchQueryString': boolean;
    /**
    * Whether the `routePrefix` should match based on pattern.
    */
    'isPattern': boolean;
    /**
    * Whether a trailing slash will be ignored.
    */
    'isTrailingSlashOptional': boolean;
    /**
    * Whether the `routePrefix` should match both HTTP and HTTPS protocols.
    */
    'isProtocolAgnostic': boolean;
    'name': string;
    /**
    * Used to prioritize URL redirection. If a given URL matches more than one redirect, the one with the **lower** precedence will be used.
    */
    'precedence': number;
    'deletedAt': number;
    'note': string;
    'label': string;
    'internallyCreated': boolean;
    'cosObjectType': UrlMapping.CosObjectTypeEnum;
    'cdnPurgeEmbargoTime': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "portalId",
            "baseName": "portalId",
            "type": "number"
        },
        {
            "name": "created",
            "baseName": "created",
            "type": "number"
        },
        {
            "name": "updated",
            "baseName": "updated",
            "type": "number"
        },
        {
            "name": "createdById",
            "baseName": "createdById",
            "type": "number"
        },
        {
            "name": "updatedById",
            "baseName": "updatedById",
            "type": "number"
        },
        {
            "name": "routePrefix",
            "baseName": "routePrefix",
            "type": "string"
        },
        {
            "name": "destination",
            "baseName": "destination",
            "type": "string"
        },
        {
            "name": "redirectStyle",
            "baseName": "redirectStyle",
            "type": "number"
        },
        {
            "name": "contentGroupId",
            "baseName": "contentGroupId",
            "type": "number"
        },
        {
            "name": "isOnlyAfterNotFound",
            "baseName": "isOnlyAfterNotFound",
            "type": "boolean"
        },
        {
            "name": "isRegex",
            "baseName": "isRegex",
            "type": "boolean"
        },
        {
            "name": "isMatchFullUrl",
            "baseName": "isMatchFullUrl",
            "type": "boolean"
        },
        {
            "name": "isMatchQueryString",
            "baseName": "isMatchQueryString",
            "type": "boolean"
        },
        {
            "name": "isPattern",
            "baseName": "isPattern",
            "type": "boolean"
        },
        {
            "name": "isTrailingSlashOptional",
            "baseName": "isTrailingSlashOptional",
            "type": "boolean"
        },
        {
            "name": "isProtocolAgnostic",
            "baseName": "isProtocolAgnostic",
            "type": "boolean"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "precedence",
            "baseName": "precedence",
            "type": "number"
        },
        {
            "name": "deletedAt",
            "baseName": "deletedAt",
            "type": "number"
        },
        {
            "name": "note",
            "baseName": "note",
            "type": "string"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "internallyCreated",
            "baseName": "internallyCreated",
            "type": "boolean"
        },
        {
            "name": "cosObjectType",
            "baseName": "cosObjectType",
            "type": "UrlMapping.CosObjectTypeEnum"
        },
        {
            "name": "cdnPurgeEmbargoTime",
            "baseName": "cdnPurgeEmbargoTime",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return UrlMapping.attributeTypeMap;
    }
}

export namespace UrlMapping {
    export enum CosObjectTypeEnum {
        CONTENT = <any> 'CONTENT',
        EXTENSIONRESOURCE = <any> 'EXTENSION_RESOURCE',
        LAYOUT = <any> 'LAYOUT',
        CUSTOMWIDGET = <any> 'CUSTOM_WIDGET',
        WIDGET = <any> 'WIDGET',
        FORM = <any> 'FORM',
        PLACEMENT = <any> 'PLACEMENT',
        IMAGE = <any> 'IMAGE',
        DOMAINSETTINGS = <any> 'DOMAIN_SETTINGS',
        SITESETTINGS = <any> 'SITE_SETTINGS',
        EMAILADDRESS = <any> 'EMAIL_ADDRESS',
        WORKFLOW = <any> 'WORKFLOW',
        HUBDBTABLE = <any> 'HUBDB_TABLE',
        REDIRECTURL = <any> 'REDIRECT_URL',
        DESIGNFOLDER = <any> 'DESIGN_FOLDER',
        SITEMAP = <any> 'SITE_MAP',
        DOMAIN = <any> 'DOMAIN',
        BLOG = <any> 'BLOG',
        FILE = <any> 'FILE',
        FOLDER = <any> 'FOLDER',
        SITEMENU = <any> 'SITE_MENU',
        THEME = <any> 'THEME',
        CONTENTGROUP = <any> 'CONTENT_GROUP',
        FOLLOWME = <any> 'FOLLOW_ME',
        KNOWLEDGEBASE = <any> 'KNOWLEDGE_BASE',
        LISTMEMBERSHIP = <any> 'LIST_MEMBERSHIP',
        CONTACTMEMBERSHIP = <any> 'CONTACT_MEMBERSHIP',
        PASSWORDPROTECTED = <any> 'PASSWORD_PROTECTED',
        UNRESTRICTEDACCESS = <any> 'UNRESTRICTED_ACCESS',
        MARKETPLACELISTING = <any> 'MARKETPLACE_LISTING',
        LAYOUTSECTION = <any> 'LAYOUT_SECTION',
        THEMESETTINGS = <any> 'THEME_SETTINGS',
        VIDEOPLAYER = <any> 'VIDEO_PLAYER',
        URLMAPPING = <any> 'URL_MAPPING',
        KNOWLEDGECATEGORY = <any> 'KNOWLEDGE_CATEGORY',
        KNOWLEDGEHOMEPAGECATEGORY = <any> 'KNOWLEDGE_HOMEPAGE_CATEGORY',
        RAWASSET = <any> 'RAW_ASSET',
        GLOBALCONTENT = <any> 'GLOBAL_CONTENT',
        HUBDBTABLEROW = <any> 'HUBDB_TABLE_ROW',
        BLOGAUTHOR = <any> 'BLOG_AUTHOR',
        SERVERLESSFUNCTION = <any> 'SERVERLESS_FUNCTION',
        KNOWLEDGECATEGORYTRANSLATION = <any> 'KNOWLEDGE_CATEGORY_TRANSLATION'
    }
}
