extends includes/layout
block content
  - const clientConfigForDefaultLimiter = '{\n  accessToken: tokenStore.accessToken\n}'
  - const clientConfigForDefaultLimiterAndRetry = '{\n  accessToken: tokenStore.accessToken,\n  numberOfApiCallRetries: hubspot.NumberOfRetries.Three \n}'
  - const clientConfigForRetry = '{\n  allowRateLimiting: false,\n  allowConcurrentLimiting: false,\n  accessToken: tokenStore.accessToke,\n  numberOfApiCallRetries: hubspot.NumberOfRetries.Six \n}'
  - const clientConfigForWaitInterceptor = '{\n  allowRateLimiting: false,\n  allowConcurrentLimiting: false,\n  accessToken: tokenStore.accessToke,\n  interceptors: [waitInterceptor]\n}'
  - const clientConfigForWaitInterceptorAndRetry = '{\n  allowRateLimiting: false,\n  allowConcurrentLimiting: false,\n  accessToken: tokenStore.accessToke,\n  interceptors: [waitInterceptor]\n  numberOfApiCallRetries: hubspot.NumberOfRetries.Three \n}'
  - const query = `/?defaultLimiterExecTime=${defaultLimiterExecTime}&defaultLimiterAndRetryExecTime=${defaultLimiterAndRetryExecTime}&retryExecTime=${retryExecTime}&waitInterceptorExecTime=${waitInterceptorExecTime}&waitInterceptorAndRetryExecTime=${waitInterceptorAndRetryExecTime}`
  section(class='container')
    table(class='tokens-table')
      thead
        tr
          th Function
          th Function description
          th Client configuration
          th Execution time, ms
      tbody
        tr
          td
            a(href=`/execute-batch/with-default-limiter${query}`)
              input(class='button-primary' type='button' value='Execute Batch' id='batch-default-limiter')
          td  Execute batch of 200 requests using one client with default limiter
          td
            pre #{clientConfigForDefaultLimiter}
          td #{defaultLimiterExecTime || ''}
        tr
          td
            a(href=`/execute-batch/with-default-limiter-and-retry${query}`)
              input(class='button-primary' type='button' value='Execute Batch' id='batch-default-limiter-and-retry')
          td  Execute batch of 200 requests using one client with default limiter and three retries
          td
            pre #{clientConfigForDefaultLimiterAndRetry}
          td #{defaultLimiterAndRetryExecTime || ''}
        tr
          td
            a(href=`/execute-batch/with-retry${query}`)
              input(class='button-primary' type='button' value='Execute Batch' id='batch-retry')
          td  Execute batch of 200 requests using two client instances with retries and without limiter
          td
            pre #{clientConfigForRetry}
          td #{retryExecTime || ''}
        tr
          td
            a(href=`/execute-batch/with-wait-interceptor${query}`)
              input(class='button-primary' type='button' value='Execute Batch' id='batch-wait-interceptor')
          td  Execute batch of 200 requests using four client instances with custom wait interceptor
          td
            pre #{clientConfigForWaitInterceptor}
          td #{waitInterceptorExecTime || ''}
        tr
          td
            a(href=`/execute-batch/with-wait-interceptor-and-retry${query}`)
              input(class='button-primary' type='button' value='Execute Batch' id='batch-wait-interceptor-and-retry')
          td  Execute batch of 200 requests using four client instances with custom wait interceptor and three retries
          td
            pre #{clientConfigForWaitInterceptorAndRetry}
          td #{waitInterceptorAndRetryExecTime || ''}

